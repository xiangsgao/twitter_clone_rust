// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "twitter_clone.proto" (package "twitter_clone", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "./google/protobuf/timestamp";
/**
 * @generated from protobuf message twitter_clone.UnlikeTweetCommentRequest
 */
export interface UnlikeTweetCommentRequest {
    /**
     * @generated from protobuf field: int32 like_id = 1;
     */
    likeId: number;
}
/**
 * @generated from protobuf message twitter_clone.UnlikeTweetCommentResponse
 */
export interface UnlikeTweetCommentResponse {
    /**
     * @generated from protobuf field: bool success = 2;
     */
    success: boolean;
}
/**
 * @generated from protobuf message twitter_clone.LikeTweetCommentRequest
 */
export interface LikeTweetCommentRequest {
    /**
     * @generated from protobuf field: int32 comment_id = 1;
     */
    commentId: number;
}
/**
 * @generated from protobuf message twitter_clone.LikeTweetCommentResponse
 */
export interface LikeTweetCommentResponse {
    /**
     * @generated from protobuf field: bool success = 1;
     */
    success: boolean;
}
/**
 * @generated from protobuf message twitter_clone.DeleteTweetCommentRequest
 */
export interface DeleteTweetCommentRequest {
    /**
     * @generated from protobuf field: int32 comment_id = 1;
     */
    commentId: number;
}
/**
 * @generated from protobuf message twitter_clone.DeleteTweetCommentResponse
 */
export interface DeleteTweetCommentResponse {
    /**
     * @generated from protobuf field: bool success = 1;
     */
    success: boolean;
}
/**
 * @generated from protobuf message twitter_clone.CreateTweetCommentRequest
 */
export interface CreateTweetCommentRequest {
    /**
     * @generated from protobuf field: int32 tweet_id = 1;
     */
    tweetId: number;
    /**
     * @generated from protobuf field: string content = 2;
     */
    content: string;
}
/**
 * @generated from protobuf message twitter_clone.CreateTweetCommentResponse
 */
export interface CreateTweetCommentResponse {
    /**
     * @generated from protobuf field: bool success = 1;
     */
    success: boolean;
}
/**
 * @generated from protobuf message twitter_clone.GetTweetCommentRequest
 */
export interface GetTweetCommentRequest {
    /**
     * @generated from protobuf field: int64 page = 1;
     */
    page: bigint;
    /**
     * @generated from protobuf field: int64 limit = 2;
     */
    limit: bigint;
    /**
     * @generated from protobuf field: int32 tweet_id = 3;
     */
    tweetId: number;
    /**
     * @generated from protobuf field: optional twitter_clone.PageFilter filter = 4;
     */
    filter?: PageFilter;
    /**
     * @generated from protobuf field: optional twitter_clone.PageSort sort = 5;
     */
    sort?: PageSort;
}
/**
 * @generated from protobuf message twitter_clone.GetTweetCommentsResponse
 */
export interface GetTweetCommentsResponse {
    /**
     * @generated from protobuf field: repeated twitter_clone.CommentRecord comments = 1;
     */
    comments: CommentRecord[];
    /**
     * @generated from protobuf field: int64 page = 2;
     */
    page: bigint;
    /**
     * @generated from protobuf field: int64 limit = 3;
     */
    limit: bigint;
    /**
     * @generated from protobuf field: int64 total = 4;
     */
    total: bigint;
}
/**
 * @generated from protobuf message twitter_clone.LikeTweetRequest
 */
export interface LikeTweetRequest {
    /**
     * @generated from protobuf field: int32 tweet_id = 1;
     */
    tweetId: number;
}
/**
 * @generated from protobuf message twitter_clone.LikeTweetResponse
 */
export interface LikeTweetResponse {
    /**
     * @generated from protobuf field: bool success = 1;
     */
    success: boolean;
}
/**
 * @generated from protobuf message twitter_clone.UnlikeTweetRequest
 */
export interface UnlikeTweetRequest {
    /**
     * @generated from protobuf field: int32 tweet_id = 1;
     */
    tweetId: number;
}
/**
 * @generated from protobuf message twitter_clone.UnlikeTweetResponse
 */
export interface UnlikeTweetResponse {
    /**
     * @generated from protobuf field: bool success = 1;
     */
    success: boolean;
}
/**
 * @generated from protobuf message twitter_clone.GetAllTweetRequest
 */
export interface GetAllTweetRequest {
    /**
     * @generated from protobuf field: int32 page = 1;
     */
    page: number;
    /**
     * @generated from protobuf field: int32 limit = 2;
     */
    limit: number;
    /**
     * @generated from protobuf field: optional twitter_clone.PageFilter filter = 3;
     */
    filter?: PageFilter;
    /**
     * @generated from protobuf field: optional twitter_clone.PageSort sort = 4;
     */
    sort?: PageSort;
}
/**
 * @generated from protobuf message twitter_clone.GetLoginTweetRequest
 */
export interface GetLoginTweetRequest {
    /**
     * @generated from protobuf field: int32 page = 1;
     */
    page: number;
    /**
     * @generated from protobuf field: int32 limit = 2;
     */
    limit: number;
    /**
     * @generated from protobuf field: optional twitter_clone.PageFilter filter = 3;
     */
    filter?: PageFilter;
    /**
     * @generated from protobuf field: optional twitter_clone.PageSort sort = 4;
     */
    sort?: PageSort;
}
/**
 * @generated from protobuf message twitter_clone.GetTweetResponse
 */
export interface GetTweetResponse {
    /**
     * @generated from protobuf field: repeated twitter_clone.TweetRecord tweets = 1;
     */
    tweets: TweetRecord[];
    /**
     * @generated from protobuf field: int32 page = 2;
     */
    page: number;
    /**
     * @generated from protobuf field: int32 limit = 3;
     */
    limit: number;
    /**
     * @generated from protobuf field: int64 total = 4;
     */
    total: bigint;
}
/**
 * @generated from protobuf message twitter_clone.EditTweetRequest
 */
export interface EditTweetRequest {
    /**
     * @generated from protobuf field: int32 tweet_id = 1;
     */
    tweetId: number;
    /**
     * @generated from protobuf field: string title = 2;
     */
    title: string;
    /**
     * @generated from protobuf field: string content = 3;
     */
    content: string;
    /**
     * @generated from protobuf field: optional int32 parent_id = 4;
     */
    parentId?: number;
}
/**
 * @generated from protobuf message twitter_clone.EditTweetResponse
 */
export interface EditTweetResponse {
    /**
     * @generated from protobuf field: bool success = 1;
     */
    success: boolean;
}
/**
 * @generated from protobuf message twitter_clone.DeleteTweetRequest
 */
export interface DeleteTweetRequest {
    /**
     * @generated from protobuf field: int32 tweet_id = 1;
     */
    tweetId: number;
}
/**
 * @generated from protobuf message twitter_clone.DeleteTweetResponse
 */
export interface DeleteTweetResponse {
    /**
     * @generated from protobuf field: bool success = 1;
     */
    success: boolean;
}
/**
 * @generated from protobuf message twitter_clone.FollowRequest
 */
export interface FollowRequest {
    /**
     * @generated from protobuf field: int32 user_id = 1;
     */
    userId: number;
}
/**
 * @generated from protobuf message twitter_clone.CreateTweetRequest
 */
export interface CreateTweetRequest {
    /**
     * @generated from protobuf field: string title = 1;
     */
    title: string;
    /**
     * @generated from protobuf field: string content = 2;
     */
    content: string;
    /**
     * @generated from protobuf field: optional int32 parent_id = 3;
     */
    parentId?: number;
}
/**
 * @generated from protobuf message twitter_clone.CreateTweetResponse
 */
export interface CreateTweetResponse {
    /**
     * @generated from protobuf field: bool success = 1;
     */
    success: boolean;
}
/**
 * @generated from protobuf message twitter_clone.GetUserRequest
 */
export interface GetUserRequest {
}
/**
 * @generated from protobuf message twitter_clone.UserResponse
 */
export interface UserResponse {
    /**
     * @generated from protobuf field: string first_name = 1;
     */
    firstName: string;
    /**
     * @generated from protobuf field: string last_name = 2;
     */
    lastName: string;
    /**
     * @generated from protobuf field: string email = 3;
     */
    email: string;
    /**
     * @generated from protobuf field: bool active = 4;
     */
    active: boolean;
    /**
     * @generated from protobuf field: uint32 followers = 5;
     */
    followers: number;
    /**
     * @generated from protobuf field: uint32 following = 6;
     */
    following: number;
}
/**
 * @generated from protobuf message twitter_clone.LogoutUserRequest
 */
export interface LogoutUserRequest {
}
/**
 * @generated from protobuf message twitter_clone.LogoutUserResponse
 */
export interface LogoutUserResponse {
    /**
     * @generated from protobuf field: bool success = 1;
     */
    success: boolean;
}
/**
 * @generated from protobuf message twitter_clone.LoginUserRequest
 */
export interface LoginUserRequest {
    /**
     * @generated from protobuf field: string email = 1;
     */
    email: string;
    /**
     * @generated from protobuf field: string password = 2;
     */
    password: string;
}
/**
 * @generated from protobuf message twitter_clone.LoginUserResponse
 */
export interface LoginUserResponse {
    /**
     * @generated from protobuf field: bool success = 1;
     */
    success: boolean;
    /**
     * @generated from protobuf field: string token = 2;
     */
    token: string;
}
/**
 * @generated from protobuf message twitter_clone.RegisterUserRequest
 */
export interface RegisterUserRequest {
    /**
     * @generated from protobuf field: string email = 1;
     */
    email: string;
    /**
     * @generated from protobuf field: string password = 2;
     */
    password: string;
    /**
     * @generated from protobuf field: string first_name = 3;
     */
    firstName: string;
    /**
     * @generated from protobuf field: string last_name = 4;
     */
    lastName: string;
}
/**
 * @generated from protobuf message twitter_clone.RegisterUserResponse
 */
export interface RegisterUserResponse {
    /**
     * @generated from protobuf field: bool success = 1;
     */
    success: boolean;
}
/**
 * @generated from protobuf message twitter_clone.TweetRecord
 */
export interface TweetRecord {
    /**
     * @generated from protobuf field: int32 id = 1;
     */
    id: number;
    /**
     * @generated from protobuf field: string content = 2;
     */
    content: string;
    /**
     * @generated from protobuf field: string title = 3;
     */
    title: string;
    /**
     * @generated from protobuf field: int32 user_id = 4;
     */
    userId: number;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp created_at = 5;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp updated_at = 6;
     */
    updatedAt?: Timestamp;
    /**
     * @generated from protobuf field: optional int32 parent_id = 7;
     */
    parentId?: number;
    /**
     * @generated from protobuf field: int64 likes = 8;
     */
    likes: bigint;
    /**
     * @generated from protobuf field: int64 comments = 9;
     */
    comments: bigint;
    /**
     * @generated from protobuf field: optional bool liked = 10;
     */
    liked?: boolean;
}
/**
 * @generated from protobuf message twitter_clone.CommentRecord
 */
export interface CommentRecord {
    /**
     * @generated from protobuf field: int32 id = 1;
     */
    id: number;
    /**
     * @generated from protobuf field: string content = 2;
     */
    content: string;
    /**
     * @generated from protobuf field: int32 tweet_id = 3;
     */
    tweetId: number;
    /**
     * @generated from protobuf field: int64 likes = 4;
     */
    likes: bigint;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp created_at = 5;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp updated_at = 6;
     */
    updatedAt?: Timestamp;
}
/**
 * @generated from protobuf enum twitter_clone.PageSort
 */
export enum PageSort {
    /**
     * @generated from protobuf enum value: sort_created_at = 0;
     */
    sort_created_at = 0,
    /**
     * @generated from protobuf enum value: sort_updated_at = 1;
     */
    sort_updated_at = 1
}
/**
 * @generated from protobuf enum twitter_clone.PageFilter
 */
export enum PageFilter {
    /**
     * @generated from protobuf enum value: filter_created_at = 0;
     */
    filter_created_at = 0,
    /**
     * @generated from protobuf enum value: filter_updated_at = 1;
     */
    filter_updated_at = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class UnlikeTweetCommentRequest$Type extends MessageType<UnlikeTweetCommentRequest> {
    constructor() {
        super("twitter_clone.UnlikeTweetCommentRequest", [
            { no: 1, name: "like_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<UnlikeTweetCommentRequest>): UnlikeTweetCommentRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.likeId = 0;
        if (value !== undefined)
            reflectionMergePartial<UnlikeTweetCommentRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UnlikeTweetCommentRequest): UnlikeTweetCommentRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 like_id */ 1:
                    message.likeId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UnlikeTweetCommentRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 like_id = 1; */
        if (message.likeId !== 0)
            writer.tag(1, WireType.Varint).int32(message.likeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message twitter_clone.UnlikeTweetCommentRequest
 */
export const UnlikeTweetCommentRequest = new UnlikeTweetCommentRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UnlikeTweetCommentResponse$Type extends MessageType<UnlikeTweetCommentResponse> {
    constructor() {
        super("twitter_clone.UnlikeTweetCommentResponse", [
            { no: 2, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<UnlikeTweetCommentResponse>): UnlikeTweetCommentResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.success = false;
        if (value !== undefined)
            reflectionMergePartial<UnlikeTweetCommentResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UnlikeTweetCommentResponse): UnlikeTweetCommentResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 2:
                    message.success = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UnlikeTweetCommentResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 2; */
        if (message.success !== false)
            writer.tag(2, WireType.Varint).bool(message.success);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message twitter_clone.UnlikeTweetCommentResponse
 */
export const UnlikeTweetCommentResponse = new UnlikeTweetCommentResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LikeTweetCommentRequest$Type extends MessageType<LikeTweetCommentRequest> {
    constructor() {
        super("twitter_clone.LikeTweetCommentRequest", [
            { no: 1, name: "comment_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<LikeTweetCommentRequest>): LikeTweetCommentRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.commentId = 0;
        if (value !== undefined)
            reflectionMergePartial<LikeTweetCommentRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LikeTweetCommentRequest): LikeTweetCommentRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 comment_id */ 1:
                    message.commentId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LikeTweetCommentRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 comment_id = 1; */
        if (message.commentId !== 0)
            writer.tag(1, WireType.Varint).int32(message.commentId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message twitter_clone.LikeTweetCommentRequest
 */
export const LikeTweetCommentRequest = new LikeTweetCommentRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LikeTweetCommentResponse$Type extends MessageType<LikeTweetCommentResponse> {
    constructor() {
        super("twitter_clone.LikeTweetCommentResponse", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<LikeTweetCommentResponse>): LikeTweetCommentResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.success = false;
        if (value !== undefined)
            reflectionMergePartial<LikeTweetCommentResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LikeTweetCommentResponse): LikeTweetCommentResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LikeTweetCommentResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message twitter_clone.LikeTweetCommentResponse
 */
export const LikeTweetCommentResponse = new LikeTweetCommentResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteTweetCommentRequest$Type extends MessageType<DeleteTweetCommentRequest> {
    constructor() {
        super("twitter_clone.DeleteTweetCommentRequest", [
            { no: 1, name: "comment_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteTweetCommentRequest>): DeleteTweetCommentRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.commentId = 0;
        if (value !== undefined)
            reflectionMergePartial<DeleteTweetCommentRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteTweetCommentRequest): DeleteTweetCommentRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 comment_id */ 1:
                    message.commentId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteTweetCommentRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 comment_id = 1; */
        if (message.commentId !== 0)
            writer.tag(1, WireType.Varint).int32(message.commentId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message twitter_clone.DeleteTweetCommentRequest
 */
export const DeleteTweetCommentRequest = new DeleteTweetCommentRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteTweetCommentResponse$Type extends MessageType<DeleteTweetCommentResponse> {
    constructor() {
        super("twitter_clone.DeleteTweetCommentResponse", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteTweetCommentResponse>): DeleteTweetCommentResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.success = false;
        if (value !== undefined)
            reflectionMergePartial<DeleteTweetCommentResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteTweetCommentResponse): DeleteTweetCommentResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteTweetCommentResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message twitter_clone.DeleteTweetCommentResponse
 */
export const DeleteTweetCommentResponse = new DeleteTweetCommentResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateTweetCommentRequest$Type extends MessageType<CreateTweetCommentRequest> {
    constructor() {
        super("twitter_clone.CreateTweetCommentRequest", [
            { no: 1, name: "tweet_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateTweetCommentRequest>): CreateTweetCommentRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.tweetId = 0;
        message.content = "";
        if (value !== undefined)
            reflectionMergePartial<CreateTweetCommentRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateTweetCommentRequest): CreateTweetCommentRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 tweet_id */ 1:
                    message.tweetId = reader.int32();
                    break;
                case /* string content */ 2:
                    message.content = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateTweetCommentRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 tweet_id = 1; */
        if (message.tweetId !== 0)
            writer.tag(1, WireType.Varint).int32(message.tweetId);
        /* string content = 2; */
        if (message.content !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.content);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message twitter_clone.CreateTweetCommentRequest
 */
export const CreateTweetCommentRequest = new CreateTweetCommentRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateTweetCommentResponse$Type extends MessageType<CreateTweetCommentResponse> {
    constructor() {
        super("twitter_clone.CreateTweetCommentResponse", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<CreateTweetCommentResponse>): CreateTweetCommentResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.success = false;
        if (value !== undefined)
            reflectionMergePartial<CreateTweetCommentResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateTweetCommentResponse): CreateTweetCommentResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateTweetCommentResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message twitter_clone.CreateTweetCommentResponse
 */
export const CreateTweetCommentResponse = new CreateTweetCommentResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTweetCommentRequest$Type extends MessageType<GetTweetCommentRequest> {
    constructor() {
        super("twitter_clone.GetTweetCommentRequest", [
            { no: 1, name: "page", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "limit", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "tweet_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "filter", kind: "enum", opt: true, T: () => ["twitter_clone.PageFilter", PageFilter] },
            { no: 5, name: "sort", kind: "enum", opt: true, T: () => ["twitter_clone.PageSort", PageSort] }
        ]);
    }
    create(value?: PartialMessage<GetTweetCommentRequest>): GetTweetCommentRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.page = 0n;
        message.limit = 0n;
        message.tweetId = 0;
        if (value !== undefined)
            reflectionMergePartial<GetTweetCommentRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTweetCommentRequest): GetTweetCommentRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 page */ 1:
                    message.page = reader.int64().toBigInt();
                    break;
                case /* int64 limit */ 2:
                    message.limit = reader.int64().toBigInt();
                    break;
                case /* int32 tweet_id */ 3:
                    message.tweetId = reader.int32();
                    break;
                case /* optional twitter_clone.PageFilter filter */ 4:
                    message.filter = reader.int32();
                    break;
                case /* optional twitter_clone.PageSort sort */ 5:
                    message.sort = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTweetCommentRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 page = 1; */
        if (message.page !== 0n)
            writer.tag(1, WireType.Varint).int64(message.page);
        /* int64 limit = 2; */
        if (message.limit !== 0n)
            writer.tag(2, WireType.Varint).int64(message.limit);
        /* int32 tweet_id = 3; */
        if (message.tweetId !== 0)
            writer.tag(3, WireType.Varint).int32(message.tweetId);
        /* optional twitter_clone.PageFilter filter = 4; */
        if (message.filter !== undefined)
            writer.tag(4, WireType.Varint).int32(message.filter);
        /* optional twitter_clone.PageSort sort = 5; */
        if (message.sort !== undefined)
            writer.tag(5, WireType.Varint).int32(message.sort);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message twitter_clone.GetTweetCommentRequest
 */
export const GetTweetCommentRequest = new GetTweetCommentRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTweetCommentsResponse$Type extends MessageType<GetTweetCommentsResponse> {
    constructor() {
        super("twitter_clone.GetTweetCommentsResponse", [
            { no: 1, name: "comments", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CommentRecord },
            { no: 2, name: "page", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "limit", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "total", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<GetTweetCommentsResponse>): GetTweetCommentsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.comments = [];
        message.page = 0n;
        message.limit = 0n;
        message.total = 0n;
        if (value !== undefined)
            reflectionMergePartial<GetTweetCommentsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTweetCommentsResponse): GetTweetCommentsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated twitter_clone.CommentRecord comments */ 1:
                    message.comments.push(CommentRecord.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 page */ 2:
                    message.page = reader.int64().toBigInt();
                    break;
                case /* int64 limit */ 3:
                    message.limit = reader.int64().toBigInt();
                    break;
                case /* int64 total */ 4:
                    message.total = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTweetCommentsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated twitter_clone.CommentRecord comments = 1; */
        for (let i = 0; i < message.comments.length; i++)
            CommentRecord.internalBinaryWrite(message.comments[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 page = 2; */
        if (message.page !== 0n)
            writer.tag(2, WireType.Varint).int64(message.page);
        /* int64 limit = 3; */
        if (message.limit !== 0n)
            writer.tag(3, WireType.Varint).int64(message.limit);
        /* int64 total = 4; */
        if (message.total !== 0n)
            writer.tag(4, WireType.Varint).int64(message.total);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message twitter_clone.GetTweetCommentsResponse
 */
export const GetTweetCommentsResponse = new GetTweetCommentsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LikeTweetRequest$Type extends MessageType<LikeTweetRequest> {
    constructor() {
        super("twitter_clone.LikeTweetRequest", [
            { no: 1, name: "tweet_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<LikeTweetRequest>): LikeTweetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.tweetId = 0;
        if (value !== undefined)
            reflectionMergePartial<LikeTweetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LikeTweetRequest): LikeTweetRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 tweet_id */ 1:
                    message.tweetId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LikeTweetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 tweet_id = 1; */
        if (message.tweetId !== 0)
            writer.tag(1, WireType.Varint).int32(message.tweetId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message twitter_clone.LikeTweetRequest
 */
export const LikeTweetRequest = new LikeTweetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LikeTweetResponse$Type extends MessageType<LikeTweetResponse> {
    constructor() {
        super("twitter_clone.LikeTweetResponse", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<LikeTweetResponse>): LikeTweetResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.success = false;
        if (value !== undefined)
            reflectionMergePartial<LikeTweetResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LikeTweetResponse): LikeTweetResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LikeTweetResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message twitter_clone.LikeTweetResponse
 */
export const LikeTweetResponse = new LikeTweetResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UnlikeTweetRequest$Type extends MessageType<UnlikeTweetRequest> {
    constructor() {
        super("twitter_clone.UnlikeTweetRequest", [
            { no: 1, name: "tweet_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<UnlikeTweetRequest>): UnlikeTweetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.tweetId = 0;
        if (value !== undefined)
            reflectionMergePartial<UnlikeTweetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UnlikeTweetRequest): UnlikeTweetRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 tweet_id */ 1:
                    message.tweetId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UnlikeTweetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 tweet_id = 1; */
        if (message.tweetId !== 0)
            writer.tag(1, WireType.Varint).int32(message.tweetId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message twitter_clone.UnlikeTweetRequest
 */
export const UnlikeTweetRequest = new UnlikeTweetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UnlikeTweetResponse$Type extends MessageType<UnlikeTweetResponse> {
    constructor() {
        super("twitter_clone.UnlikeTweetResponse", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<UnlikeTweetResponse>): UnlikeTweetResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.success = false;
        if (value !== undefined)
            reflectionMergePartial<UnlikeTweetResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UnlikeTweetResponse): UnlikeTweetResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UnlikeTweetResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message twitter_clone.UnlikeTweetResponse
 */
export const UnlikeTweetResponse = new UnlikeTweetResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAllTweetRequest$Type extends MessageType<GetAllTweetRequest> {
    constructor() {
        super("twitter_clone.GetAllTweetRequest", [
            { no: 1, name: "page", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "limit", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "filter", kind: "enum", opt: true, T: () => ["twitter_clone.PageFilter", PageFilter] },
            { no: 4, name: "sort", kind: "enum", opt: true, T: () => ["twitter_clone.PageSort", PageSort] }
        ]);
    }
    create(value?: PartialMessage<GetAllTweetRequest>): GetAllTweetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.page = 0;
        message.limit = 0;
        if (value !== undefined)
            reflectionMergePartial<GetAllTweetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAllTweetRequest): GetAllTweetRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 page */ 1:
                    message.page = reader.int32();
                    break;
                case /* int32 limit */ 2:
                    message.limit = reader.int32();
                    break;
                case /* optional twitter_clone.PageFilter filter */ 3:
                    message.filter = reader.int32();
                    break;
                case /* optional twitter_clone.PageSort sort */ 4:
                    message.sort = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetAllTweetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 page = 1; */
        if (message.page !== 0)
            writer.tag(1, WireType.Varint).int32(message.page);
        /* int32 limit = 2; */
        if (message.limit !== 0)
            writer.tag(2, WireType.Varint).int32(message.limit);
        /* optional twitter_clone.PageFilter filter = 3; */
        if (message.filter !== undefined)
            writer.tag(3, WireType.Varint).int32(message.filter);
        /* optional twitter_clone.PageSort sort = 4; */
        if (message.sort !== undefined)
            writer.tag(4, WireType.Varint).int32(message.sort);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message twitter_clone.GetAllTweetRequest
 */
export const GetAllTweetRequest = new GetAllTweetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetLoginTweetRequest$Type extends MessageType<GetLoginTweetRequest> {
    constructor() {
        super("twitter_clone.GetLoginTweetRequest", [
            { no: 1, name: "page", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "limit", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "filter", kind: "enum", opt: true, T: () => ["twitter_clone.PageFilter", PageFilter] },
            { no: 4, name: "sort", kind: "enum", opt: true, T: () => ["twitter_clone.PageSort", PageSort] }
        ]);
    }
    create(value?: PartialMessage<GetLoginTweetRequest>): GetLoginTweetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.page = 0;
        message.limit = 0;
        if (value !== undefined)
            reflectionMergePartial<GetLoginTweetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetLoginTweetRequest): GetLoginTweetRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 page */ 1:
                    message.page = reader.int32();
                    break;
                case /* int32 limit */ 2:
                    message.limit = reader.int32();
                    break;
                case /* optional twitter_clone.PageFilter filter */ 3:
                    message.filter = reader.int32();
                    break;
                case /* optional twitter_clone.PageSort sort */ 4:
                    message.sort = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetLoginTweetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 page = 1; */
        if (message.page !== 0)
            writer.tag(1, WireType.Varint).int32(message.page);
        /* int32 limit = 2; */
        if (message.limit !== 0)
            writer.tag(2, WireType.Varint).int32(message.limit);
        /* optional twitter_clone.PageFilter filter = 3; */
        if (message.filter !== undefined)
            writer.tag(3, WireType.Varint).int32(message.filter);
        /* optional twitter_clone.PageSort sort = 4; */
        if (message.sort !== undefined)
            writer.tag(4, WireType.Varint).int32(message.sort);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message twitter_clone.GetLoginTweetRequest
 */
export const GetLoginTweetRequest = new GetLoginTweetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTweetResponse$Type extends MessageType<GetTweetResponse> {
    constructor() {
        super("twitter_clone.GetTweetResponse", [
            { no: 1, name: "tweets", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TweetRecord },
            { no: 2, name: "page", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "limit", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "total", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<GetTweetResponse>): GetTweetResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.tweets = [];
        message.page = 0;
        message.limit = 0;
        message.total = 0n;
        if (value !== undefined)
            reflectionMergePartial<GetTweetResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTweetResponse): GetTweetResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated twitter_clone.TweetRecord tweets */ 1:
                    message.tweets.push(TweetRecord.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int32 page */ 2:
                    message.page = reader.int32();
                    break;
                case /* int32 limit */ 3:
                    message.limit = reader.int32();
                    break;
                case /* int64 total */ 4:
                    message.total = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTweetResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated twitter_clone.TweetRecord tweets = 1; */
        for (let i = 0; i < message.tweets.length; i++)
            TweetRecord.internalBinaryWrite(message.tweets[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 page = 2; */
        if (message.page !== 0)
            writer.tag(2, WireType.Varint).int32(message.page);
        /* int32 limit = 3; */
        if (message.limit !== 0)
            writer.tag(3, WireType.Varint).int32(message.limit);
        /* int64 total = 4; */
        if (message.total !== 0n)
            writer.tag(4, WireType.Varint).int64(message.total);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message twitter_clone.GetTweetResponse
 */
export const GetTweetResponse = new GetTweetResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EditTweetRequest$Type extends MessageType<EditTweetRequest> {
    constructor() {
        super("twitter_clone.EditTweetRequest", [
            { no: 1, name: "tweet_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "parent_id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<EditTweetRequest>): EditTweetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.tweetId = 0;
        message.title = "";
        message.content = "";
        if (value !== undefined)
            reflectionMergePartial<EditTweetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EditTweetRequest): EditTweetRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 tweet_id */ 1:
                    message.tweetId = reader.int32();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* string content */ 3:
                    message.content = reader.string();
                    break;
                case /* optional int32 parent_id */ 4:
                    message.parentId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EditTweetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 tweet_id = 1; */
        if (message.tweetId !== 0)
            writer.tag(1, WireType.Varint).int32(message.tweetId);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* string content = 3; */
        if (message.content !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.content);
        /* optional int32 parent_id = 4; */
        if (message.parentId !== undefined)
            writer.tag(4, WireType.Varint).int32(message.parentId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message twitter_clone.EditTweetRequest
 */
export const EditTweetRequest = new EditTweetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EditTweetResponse$Type extends MessageType<EditTweetResponse> {
    constructor() {
        super("twitter_clone.EditTweetResponse", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<EditTweetResponse>): EditTweetResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.success = false;
        if (value !== undefined)
            reflectionMergePartial<EditTweetResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EditTweetResponse): EditTweetResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EditTweetResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message twitter_clone.EditTweetResponse
 */
export const EditTweetResponse = new EditTweetResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteTweetRequest$Type extends MessageType<DeleteTweetRequest> {
    constructor() {
        super("twitter_clone.DeleteTweetRequest", [
            { no: 1, name: "tweet_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteTweetRequest>): DeleteTweetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.tweetId = 0;
        if (value !== undefined)
            reflectionMergePartial<DeleteTweetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteTweetRequest): DeleteTweetRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 tweet_id */ 1:
                    message.tweetId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteTweetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 tweet_id = 1; */
        if (message.tweetId !== 0)
            writer.tag(1, WireType.Varint).int32(message.tweetId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message twitter_clone.DeleteTweetRequest
 */
export const DeleteTweetRequest = new DeleteTweetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteTweetResponse$Type extends MessageType<DeleteTweetResponse> {
    constructor() {
        super("twitter_clone.DeleteTweetResponse", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteTweetResponse>): DeleteTweetResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.success = false;
        if (value !== undefined)
            reflectionMergePartial<DeleteTweetResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteTweetResponse): DeleteTweetResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteTweetResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message twitter_clone.DeleteTweetResponse
 */
export const DeleteTweetResponse = new DeleteTweetResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FollowRequest$Type extends MessageType<FollowRequest> {
    constructor() {
        super("twitter_clone.FollowRequest", [
            { no: 1, name: "user_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<FollowRequest>): FollowRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userId = 0;
        if (value !== undefined)
            reflectionMergePartial<FollowRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FollowRequest): FollowRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 user_id */ 1:
                    message.userId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FollowRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 user_id = 1; */
        if (message.userId !== 0)
            writer.tag(1, WireType.Varint).int32(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message twitter_clone.FollowRequest
 */
export const FollowRequest = new FollowRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateTweetRequest$Type extends MessageType<CreateTweetRequest> {
    constructor() {
        super("twitter_clone.CreateTweetRequest", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "parent_id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CreateTweetRequest>): CreateTweetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.title = "";
        message.content = "";
        if (value !== undefined)
            reflectionMergePartial<CreateTweetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateTweetRequest): CreateTweetRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string content */ 2:
                    message.content = reader.string();
                    break;
                case /* optional int32 parent_id */ 3:
                    message.parentId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateTweetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string content = 2; */
        if (message.content !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.content);
        /* optional int32 parent_id = 3; */
        if (message.parentId !== undefined)
            writer.tag(3, WireType.Varint).int32(message.parentId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message twitter_clone.CreateTweetRequest
 */
export const CreateTweetRequest = new CreateTweetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateTweetResponse$Type extends MessageType<CreateTweetResponse> {
    constructor() {
        super("twitter_clone.CreateTweetResponse", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<CreateTweetResponse>): CreateTweetResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.success = false;
        if (value !== undefined)
            reflectionMergePartial<CreateTweetResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateTweetResponse): CreateTweetResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateTweetResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message twitter_clone.CreateTweetResponse
 */
export const CreateTweetResponse = new CreateTweetResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetUserRequest$Type extends MessageType<GetUserRequest> {
    constructor() {
        super("twitter_clone.GetUserRequest", []);
    }
    create(value?: PartialMessage<GetUserRequest>): GetUserRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetUserRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetUserRequest): GetUserRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetUserRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message twitter_clone.GetUserRequest
 */
export const GetUserRequest = new GetUserRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UserResponse$Type extends MessageType<UserResponse> {
    constructor() {
        super("twitter_clone.UserResponse", [
            { no: 1, name: "first_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "last_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "active", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "followers", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "following", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<UserResponse>): UserResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.firstName = "";
        message.lastName = "";
        message.email = "";
        message.active = false;
        message.followers = 0;
        message.following = 0;
        if (value !== undefined)
            reflectionMergePartial<UserResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UserResponse): UserResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string first_name */ 1:
                    message.firstName = reader.string();
                    break;
                case /* string last_name */ 2:
                    message.lastName = reader.string();
                    break;
                case /* string email */ 3:
                    message.email = reader.string();
                    break;
                case /* bool active */ 4:
                    message.active = reader.bool();
                    break;
                case /* uint32 followers */ 5:
                    message.followers = reader.uint32();
                    break;
                case /* uint32 following */ 6:
                    message.following = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UserResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string first_name = 1; */
        if (message.firstName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.firstName);
        /* string last_name = 2; */
        if (message.lastName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.lastName);
        /* string email = 3; */
        if (message.email !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.email);
        /* bool active = 4; */
        if (message.active !== false)
            writer.tag(4, WireType.Varint).bool(message.active);
        /* uint32 followers = 5; */
        if (message.followers !== 0)
            writer.tag(5, WireType.Varint).uint32(message.followers);
        /* uint32 following = 6; */
        if (message.following !== 0)
            writer.tag(6, WireType.Varint).uint32(message.following);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message twitter_clone.UserResponse
 */
export const UserResponse = new UserResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LogoutUserRequest$Type extends MessageType<LogoutUserRequest> {
    constructor() {
        super("twitter_clone.LogoutUserRequest", []);
    }
    create(value?: PartialMessage<LogoutUserRequest>): LogoutUserRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<LogoutUserRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LogoutUserRequest): LogoutUserRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: LogoutUserRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message twitter_clone.LogoutUserRequest
 */
export const LogoutUserRequest = new LogoutUserRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LogoutUserResponse$Type extends MessageType<LogoutUserResponse> {
    constructor() {
        super("twitter_clone.LogoutUserResponse", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<LogoutUserResponse>): LogoutUserResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.success = false;
        if (value !== undefined)
            reflectionMergePartial<LogoutUserResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LogoutUserResponse): LogoutUserResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LogoutUserResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message twitter_clone.LogoutUserResponse
 */
export const LogoutUserResponse = new LogoutUserResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoginUserRequest$Type extends MessageType<LoginUserRequest> {
    constructor() {
        super("twitter_clone.LoginUserRequest", [
            { no: 1, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "password", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoginUserRequest>): LoginUserRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.email = "";
        message.password = "";
        if (value !== undefined)
            reflectionMergePartial<LoginUserRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoginUserRequest): LoginUserRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string email */ 1:
                    message.email = reader.string();
                    break;
                case /* string password */ 2:
                    message.password = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoginUserRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string email = 1; */
        if (message.email !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.email);
        /* string password = 2; */
        if (message.password !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.password);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message twitter_clone.LoginUserRequest
 */
export const LoginUserRequest = new LoginUserRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoginUserResponse$Type extends MessageType<LoginUserResponse> {
    constructor() {
        super("twitter_clone.LoginUserResponse", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "token", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoginUserResponse>): LoginUserResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.success = false;
        message.token = "";
        if (value !== undefined)
            reflectionMergePartial<LoginUserResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoginUserResponse): LoginUserResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                case /* string token */ 2:
                    message.token = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoginUserResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        /* string token = 2; */
        if (message.token !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.token);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message twitter_clone.LoginUserResponse
 */
export const LoginUserResponse = new LoginUserResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RegisterUserRequest$Type extends MessageType<RegisterUserRequest> {
    constructor() {
        super("twitter_clone.RegisterUserRequest", [
            { no: 1, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "password", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "first_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "last_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RegisterUserRequest>): RegisterUserRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.email = "";
        message.password = "";
        message.firstName = "";
        message.lastName = "";
        if (value !== undefined)
            reflectionMergePartial<RegisterUserRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RegisterUserRequest): RegisterUserRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string email */ 1:
                    message.email = reader.string();
                    break;
                case /* string password */ 2:
                    message.password = reader.string();
                    break;
                case /* string first_name */ 3:
                    message.firstName = reader.string();
                    break;
                case /* string last_name */ 4:
                    message.lastName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RegisterUserRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string email = 1; */
        if (message.email !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.email);
        /* string password = 2; */
        if (message.password !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.password);
        /* string first_name = 3; */
        if (message.firstName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.firstName);
        /* string last_name = 4; */
        if (message.lastName !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.lastName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message twitter_clone.RegisterUserRequest
 */
export const RegisterUserRequest = new RegisterUserRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RegisterUserResponse$Type extends MessageType<RegisterUserResponse> {
    constructor() {
        super("twitter_clone.RegisterUserResponse", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<RegisterUserResponse>): RegisterUserResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.success = false;
        if (value !== undefined)
            reflectionMergePartial<RegisterUserResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RegisterUserResponse): RegisterUserResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RegisterUserResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message twitter_clone.RegisterUserResponse
 */
export const RegisterUserResponse = new RegisterUserResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TweetRecord$Type extends MessageType<TweetRecord> {
    constructor() {
        super("twitter_clone.TweetRecord", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "user_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 6, name: "updated_at", kind: "message", T: () => Timestamp },
            { no: 7, name: "parent_id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "likes", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 9, name: "comments", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 10, name: "liked", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<TweetRecord>): TweetRecord {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.content = "";
        message.title = "";
        message.userId = 0;
        message.likes = 0n;
        message.comments = 0n;
        if (value !== undefined)
            reflectionMergePartial<TweetRecord>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TweetRecord): TweetRecord {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* string content */ 2:
                    message.content = reader.string();
                    break;
                case /* string title */ 3:
                    message.title = reader.string();
                    break;
                case /* int32 user_id */ 4:
                    message.userId = reader.int32();
                    break;
                case /* google.protobuf.Timestamp created_at */ 5:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* google.protobuf.Timestamp updated_at */ 6:
                    message.updatedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.updatedAt);
                    break;
                case /* optional int32 parent_id */ 7:
                    message.parentId = reader.int32();
                    break;
                case /* int64 likes */ 8:
                    message.likes = reader.int64().toBigInt();
                    break;
                case /* int64 comments */ 9:
                    message.comments = reader.int64().toBigInt();
                    break;
                case /* optional bool liked */ 10:
                    message.liked = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TweetRecord, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* string content = 2; */
        if (message.content !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.content);
        /* string title = 3; */
        if (message.title !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.title);
        /* int32 user_id = 4; */
        if (message.userId !== 0)
            writer.tag(4, WireType.Varint).int32(message.userId);
        /* google.protobuf.Timestamp created_at = 5; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp updated_at = 6; */
        if (message.updatedAt)
            Timestamp.internalBinaryWrite(message.updatedAt, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 parent_id = 7; */
        if (message.parentId !== undefined)
            writer.tag(7, WireType.Varint).int32(message.parentId);
        /* int64 likes = 8; */
        if (message.likes !== 0n)
            writer.tag(8, WireType.Varint).int64(message.likes);
        /* int64 comments = 9; */
        if (message.comments !== 0n)
            writer.tag(9, WireType.Varint).int64(message.comments);
        /* optional bool liked = 10; */
        if (message.liked !== undefined)
            writer.tag(10, WireType.Varint).bool(message.liked);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message twitter_clone.TweetRecord
 */
export const TweetRecord = new TweetRecord$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CommentRecord$Type extends MessageType<CommentRecord> {
    constructor() {
        super("twitter_clone.CommentRecord", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "tweet_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "likes", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 6, name: "updated_at", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<CommentRecord>): CommentRecord {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.content = "";
        message.tweetId = 0;
        message.likes = 0n;
        if (value !== undefined)
            reflectionMergePartial<CommentRecord>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CommentRecord): CommentRecord {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* string content */ 2:
                    message.content = reader.string();
                    break;
                case /* int32 tweet_id */ 3:
                    message.tweetId = reader.int32();
                    break;
                case /* int64 likes */ 4:
                    message.likes = reader.int64().toBigInt();
                    break;
                case /* google.protobuf.Timestamp created_at */ 5:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* google.protobuf.Timestamp updated_at */ 6:
                    message.updatedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.updatedAt);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CommentRecord, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* string content = 2; */
        if (message.content !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.content);
        /* int32 tweet_id = 3; */
        if (message.tweetId !== 0)
            writer.tag(3, WireType.Varint).int32(message.tweetId);
        /* int64 likes = 4; */
        if (message.likes !== 0n)
            writer.tag(4, WireType.Varint).int64(message.likes);
        /* google.protobuf.Timestamp created_at = 5; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp updated_at = 6; */
        if (message.updatedAt)
            Timestamp.internalBinaryWrite(message.updatedAt, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message twitter_clone.CommentRecord
 */
export const CommentRecord = new CommentRecord$Type();
/**
 * @generated ServiceType for protobuf service twitter_clone.User
 */
export const User = new ServiceType("twitter_clone.User", [
    { name: "LoginUser", options: {}, I: LoginUserRequest, O: LoginUserResponse },
    { name: "RegisterUser", options: {}, I: RegisterUserRequest, O: RegisterUserResponse },
    { name: "LogoutUser", options: {}, I: LogoutUserRequest, O: LogoutUserResponse },
    { name: "GetUser", options: {}, I: GetUserRequest, O: UserResponse },
    { name: "FollowUser", options: {}, I: FollowRequest, O: UserResponse },
    { name: "UnfollowUser", options: {}, I: FollowRequest, O: UserResponse }
]);
/**
 * @generated ServiceType for protobuf service twitter_clone.Tweet
 */
export const Tweet = new ServiceType("twitter_clone.Tweet", [
    { name: "CreateTweet", options: {}, I: CreateTweetRequest, O: CreateTweetResponse },
    { name: "DeleteTweet", options: {}, I: DeleteTweetRequest, O: DeleteTweetResponse },
    { name: "EditTweet", options: {}, I: EditTweetRequest, O: EditTweetResponse },
    { name: "GetLoginTweet", options: {}, I: GetLoginTweetRequest, O: GetTweetResponse },
    { name: "GetAllTweet", options: {}, I: GetAllTweetRequest, O: GetTweetResponse },
    { name: "LikeTweet", options: {}, I: LikeTweetRequest, O: LikeTweetResponse },
    { name: "UnlikeTweet", options: {}, I: UnlikeTweetRequest, O: UnlikeTweetResponse },
    { name: "GetTweetComments", options: {}, I: GetTweetCommentRequest, O: GetTweetCommentsResponse },
    { name: "CreateTweetComment", options: {}, I: CreateTweetCommentRequest, O: CreateTweetCommentResponse },
    { name: "DeleteTweetComment", options: {}, I: DeleteTweetCommentRequest, O: DeleteTweetCommentResponse },
    { name: "LikeTweetComment", options: {}, I: LikeTweetCommentRequest, O: LikeTweetCommentResponse },
    { name: "UnlikeTweetComment", options: {}, I: UnlikeTweetCommentRequest, O: UnlikeTweetCommentResponse }
]);
